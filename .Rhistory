source('~/R/regionMap_v2 - small/map.R', echo=TRUE)
source('~/R/regionMap_v2 - small/1stUser.R', echo=TRUE)
plot(G1)
source('~/R/regionMap_v2 - small/map.R', echo=TRUE)
a
v<-c(1,2,3 ,,3,2,3,,2,,,,3)
v<-c(1,2,3 ,NULL,3,2,3,NULL,2,NULL,NULL,NULL,3)
V
v
length(v)
v<-data.frame(v)
v
v[1,]<-NULL
v[1,1]<-NULL
v[1,]<-na
v[1,]<-NA
v
v[is.na(v)]
v[4,1]<-NA
v
v[is.na(v)]
class(v[is.na(v)])
v
order(v)
class(order(v))
type(order(v))
v[c(2,5)]
v[c(2,5),]
source('~/R/weekday.R', echo=TRUE)
rs
avg
names(rs)
ggplot(rs, aes(x=createdate, y=count))+geom_line()
library(ggplot2)
ggplot(rs, aes(x=createdate, y=count))+geom_line()
ggplot(rs, aes(x=createdate, y=count,group=1))+geom_line()
ggplot(rs, aes(x=createdate, y=count,color=day))+geom_line()
ggplot(rs, aes(x=as.numeric(createdate), y=count,color=day))+geom_line()
rs
as.numeric(rs[1,1])
ggplot(rs, aes(x=createdate, y=count,color=day,group=1))+geom_line()
ggplot(rs, aes(x=createdate, y=count,color=day,group=7))+geom_line()
ggplot(rs, aes(x=createdate, y=count,color=day,group=day))+geom_line()
ggplot(rs, aes(x=createdate, y=count,linetype=day,group=day))+geom_line()
ggplot(rs, aes(x=createdate, y=count,linetype=day))+geom_point()
ggplot(rs, aes(x=createdate, y=count,color=day))+geom_point()
weekday
weekday<-subset(rs, day!='Sat'&&day!='Sun')
weekday
ggplot(weekday, aes(x=createdate, y=count,color=day))+geom_point()
weekday
weekday<-subset(rs, day!='Sat'&&day!='Sun', select=createtime:count)
weekday<-subset(rs, day!='Sat'&&day!='Sun', select=createdate:count)
weekday
weekday<-subset(rs, day!='Sat'&&day!='Sun', select=createdate:count)
weekday
source('~/R/regionMap_v2 - small/1stUser.R', echo=TRUE)
source('~/R/regionMap_v2 - small/1000User.R', echo=TRUE)
source('~/R/regionMap_v2 - small/CurrentUser.R', echo=TRUE)
source('~/R/regionMap_v2 - small/map.R', echo=TRUE)
source('~/R/regionMap_v2 - small/1stUser.R', echo=TRUE)
source('~/R/regionMap_v2 - small/map.R', echo=TRUE)
source('~/R/regionMap_v2 - small/1stUser.R', echo=TRUE)
source('~/R/regionMap_v2 - small/map.R', echo=TRUE)
source('~/R/regionMap_v2 - small/1stUser.R', echo=TRUE)
source('~/R/regionMap_v2 - small/map.R', echo=TRUE)
source('~/R/regionMap_v2 - small/map.R', echo=TRUE)
source('~/R/regionMap_v2 - small/1stUser.R', echo=TRUE)
source('~/R/regionMap_v2 - small/map.R', echo=TRUE)
source('~/R/regionMap_v2 - small/map.R', echo=TRUE)
source('~/R/regionMap_v2 - small/1stUser.R', echo=TRUE)
source('~/R/regionMap_v2 - small/map.R', echo=TRUE)
source('~/R/regionMap_v2 - small/1000User.R', echo=TRUE)
source('~/R/regionMap_v2 - small/CurrentUser.R', echo=TRUE)
source('~/R/regionMap_v2 - small/map.R', echo=TRUE)
source('~/R/regionMap_v2 - small/1stUser.R', echo=TRUE)
source('~/R/regionMap_v2 - small/map.R', echo=TRUE)
source('~/R/regionMap_v3 - timestamp/1stUser.R', echo=TRUE)
source('~/R/regionMap_v3 - timestamp/1000User.R', echo=TRUE)
source('~/R/regionMap_v3 - timestamp/1stUser.R', echo=TRUE)
source('~/R/regionMap_v3 - timestamp/CurrentUser.R', echo=TRUE)
source('~/R/regionMap_v3 - timestamp/CurrentUser.R', echo=TRUE)
timestamp
source('~/R/regionMap_v3 - timestamp/CurrentUser.R', echo=TRUE)
timestamp
source('~/R/regionMap_v3 - timestamp/1stUser.R', echo=TRUE)
timestamp
title
title(timestamp)
title<-data.frame(timestamp)
title
names(title)
names(title)<-firstUser
names(title)<-'firstUser'
names(title)
source('~/R/regionMap_v3 - timestamp/1stUser.R', echo=TRUE)
source('~/R/regionMap_v3 - timestamp/1000User.R', echo=TRUE)
source('~/R/regionMap_v3 - timestamp/CurrentUser.R', echo=TRUE)
source('~/R/regionMap_v3 - timestamp/map.R', echo=TRUE)
titile
title
source('~/R/regionMap_v3 - timestamp/CurrentUser.R', echo=TRUE)
title
source('~/R/regionMap_v3 - timestamp/CurrentUser.R', echo=TRUE)
source('~/R/regionMap_v3 - timestamp/map.R', echo=TRUE)
source('~/R/regionMap_v3 - timestamp/1stUser.R', echo=TRUE)
source('~/R/regionMap_v3 - timestamp/map.R', echo=TRUE)
source('~/R/regionMap_v3 - timestamp/1stUser.R', echo=TRUE)
source('~/R/regionMap_v3 - timestamp/1stUser.R', echo=TRUE)
title
source('~/R/regionMap_v3 - timestamp/1000User.R', echo=TRUE)
source('~/R/regionMap_v3 - timestamp/CurrentUser.R', echo=TRUE)
source('~/R/regionMap_v3 - timestamp/map.R', echo=TRUE)
source('~/R/regionMap_v3 - timestamp/map.R', echo=TRUE)
source('~/R/regionMap_v3 - timestamp/1stUser.R', echo=TRUE)
source('~/R/regionMap_v3 - timestamp/map.R', echo=TRUE)
source('~/R/regionMap_v3 - timestamp/1stUser.R', echo=TRUE)
source('~/R/regionMap_v3 - timestamp/map.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages(xlsx)
install.packages("xlsx")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(rJava)
source('~/.active-rstudio-document', echo=TRUE)
library(xlsx)
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jdk1.7.0_60\\jre")
library(xlsx)
著作权归作者所有。
商业转载请联系作者获得授权，非商业转载请注明出处。
作者：陈凯
链接：https://www.zhihu.com/question/21584334/answer/21049093
来源：知乎
Sys.setenv(JAVA_HOME='C:\Program Files\Java\jre7')
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
source('~/.active-rstudio-document', echo=TRUE)
library(xlsx)
source('~/.active-rstudio-document', echo=TRUE)
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jdk1.7.0_60\\jre
")
library(xlsx)
Sys.setenv(JAVA_HOME="C:\\Program Files (x86)\\Java\\jre1.8.0_66")
library(xlsx)
library(xlsx)
ls()
source('~/R/wechat.R', echo=TRUE)
library(xlsx)
names(msgs)
msgs$sendertime
msgs$sendertimestamp
msgs[1]
msgs[2]
msgs$sendertime<-NULL
names(msgs)
msgs[1:5,reporterqq]
msgs[1:5,"reporterqq"]
msgs[1:5,"reportername"]
msgs[1:5,"istroop"]
msgs[1:5,"createtime"]
msgs[1:5,"createdate"]
msgs[1:5,"postuser"]
msgt<-msgs[,c("sendertimestamp","createtime")]
msgt
typeof(msgt)
typeof(msgt[1])
typeof(msgt[1,1])
print(msgt[1,1])
as.POSIXct(msgt[1,1])
as.POSIXlt(msgt[1,1])
as.Date(msgt[1,1])
as.double(msgt[1,1])
print(as.double(msgt[1,1]))
Sys.time()
typeof(Sys.time())
t<-msgt[1,1]
t
typeof(t)
as.double(t)
t<-as.double(t)
t
typeof(t)
class(t)
class(Sys.time())
print(t)
t<-as.POSIXlt(t)
t<-as.POSIXlt(t, "1960-01-01")
t<-as.POSIXlt(t, origin = "1960-01-01")
t
t<-as.POSIXlt(t, origin = "1970-01-01")
t
t<-as.POSIXlt(t, origin = "1970-01-01", tz = "CCT")
t
t<-as.POSIXlt(t, tz = "CCT", origin = "1970-01-01")
t
Sys.time()
msgt$sendertimestamp<-as.POSIXlt(msgt$sendertimestamp, tz = "CCT", origin = "1970-01-01")
msgt$sendertimestamp<-as.POSIXlt(msgt$sendertimestamp, origin = "1970-01-01")
msgt$sendertimestamp
msgt$createtime<-as.POSIXlt(msgt$createtime, origin="1970-01-01")
msgt
msgt[1,1]
Sys.timezone()
Sys.timezone(FALSE)
msgt$createtime<-as.POSIXlt(msgt$createtime, origin="1970-01-01", tz="CST")
msgt$sendertimestamp<-as.POSIXlt(msgt$sendertimestamp, origin="1970-01-01", tz="CST")
msgt
msgt[1,1]
msgt[1,2]
msgt$sendertimestamp<-as.POSIXlt(msgt$sendertimestamp, tz="CST", origion="1970-01-01")
msgt
source('~/R/wechat.R', echo=TRUE)
source('~/R/wechat.R', echo=TRUE)
names(msgs)
m<-msgs[,c("dmacct", "sendertime", "sendertimestamp", "createtime", "createdate")]
m
m[1:5]
m[1:5,]
m$sendertime<-NULL
m$createdate<-NULL
m
m[1:5,]
names(m)[2]<-"sendertime"
names(m)
names(m)[2]<-sendertime
m$sendertime<-as.POSIXlt(m$sendertime, origin = "1970-01-01")
m[1:5,]
m$dmacct=='test%'
source('~/R/wechat.R', echo=TRUE)
msgs[1:5,]
m<-msgs[,c("dmacct","sendertimestamp","createtime")]
m
m[1:5,]
m$sendertimestamp <- as.POSIXlt(m$sendertimestamp, origin = "1970-01-01")
m$createtime <- as.POSIXlt(m$createtime, origin = "1970-01-01")
m
ls()
names(m)
m$sendertimestamp <- NULL
names(m)
names(m)[2][1]
p<-m[1,2]
p
p$hour
m$hour <- m$createtime$hour
m[1:5,]
m
hour <- m$hour
hourtable<-table(hour)
hourtable
ggplot(hour, aex(x=m$hour)) + geom_bar()
library(ggplot2)
ggplot(hour, aex(x=m$hour)) + geom_bar()
ggplot(hour, aes(x=m$hour)) + geom_bar()
ggplot(m, aes(x=m$hour)) + geom_bar()
ggplot(m, aes(x=factor(m$hour))) + geom_bar()
ggtitle("微信端报价数量时间分布")
gg <- ggplot(m, aes(x=factor(m$hour))) + geom_bar()
gg <- + ggtitle("微信端报价数量时间分布")
gg + ggtitle("微信端报价数量时间分布")
gg
gg <- gg + ggtitle("微信端报价数量时间分布")
gg
gg <- gg + xlab("time /h")
gg
gg <- gg + xlab("time in hour")
gg
gg <- gg + xlab("daytime in hour")
gg <- gg + xlab("daytime in hour")
gg
gg <- gg + annotate("text", x = 10, y = 10, labs = "data source: 2015/12/1-2016/1/4")
gg <- gg + annotate("text", x = 10, y = 10, label = "data source: 2015/12/1-2016/1/4")
gg
gg <- gg + annotate("text", x = 10, y = 50, label = "data source: 2015/12/1-2016/1/4")
gg
gg <- gg - annotate("text", x = 10, y = 50, label = "data source: 2015/12/1-2016/1/4")
str(gg)
source('~/R/wechat.R', encoding = 'UTF-8', echo=TRUE)
m
m$createtime$day
m$createtime[1]$day
m$createtime[1]$hour
m$createtime[1]$date
m$createtime[1]$month
m$createtime[1]$mon
m$createtime[1]$mday
m$createtime[1]$year
d<-m$createtime[1]
d
as.Date(d)
)
ls()
gg
hour
rm(hour)
rm(hourtable)
m
ls(
)
p
rm(p)
m
m$date<-as.Date(m$createtime)
m[1:5,]
ls()
data<-table(m$date)
date<-table(m$date)
rm(data)
date
class(date)
typeof(dae)
typeof(date)
date<-data.frame(date)
date
names(Var1)[1]<-"date"
names(date)[1]<-"date"
ggdate <- ggplot(m, aes(x=factor(m$date))) + geom_bar() + ggtitle("微信端每日报价数量（2015/12/1-2016/1/4）")
ggdate
ls()
m[1:5,]
install.packages("swirl")
packageVersion("swirl")
library("swirl")
library(swirl)
library(swirl)
library("swirl")
install_from_swirl()
install_from_swirl("R Programing Language")
install_from_swirl("R Programing")
install_from_swirl("R Programming")
library('xlsx')
?read.xlsx
getwd()
df<-read.xlsx('loginFrequency', sheetIndex =1, header = T)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
head(df)
is.na(df$loginfrequency)
names(df)
names(df)[1]<-name
names(df)[1]<-'name'
names(df)[4]<-'loginfreq'
names(df)
df[is.na(df$loginfreq), ]<-0
df
source('~/R/loginFrequency.R', echo=TRUE)
source('~/R/loginFrequency.R', echo=TRUE)
head(df)
?read.table
source('~/R/loginFrequency.R', echo=TRUE)
head(df)
names(df)[4]<-'freq'
df[is.na(df$freq), freq]
df[is.na(df$freq), 'freq']
df[is.na(df$freq), 'freq']<-0
df
head(df)
source('~/R/loginFrequency.R', echo=TRUE)
ggplot(df, aes(x=factor(spellname), y = freq)) + geom_point()
?read.csv
library(igraph)
g<-graph.tree(40,4)
plot(g)
plot(g, layout=layout.circle)
plot(g, layout=layout.fruchterman.reingold
)
plot(g, layout=layout.graphopt)
plot(g, layout=layout.kamada.kawai())
plot(g, layout=layout.kamada.kawai
)
?graph.tree
tkplot(g, layout = layout.kamada.kawai)
tkplot(g, layout = layout.kamada.kawai)
l<-layout.kamada.kawai(g)
rglplt(g, layout = l)
rglplot(g, layout = l)
install.packages(rgl)
"rgl"
plot(g, layout=layout.kamada.kawai, vertex.color = "cyan")
graph.edgelist(matrix(c(1,2), c(2,3)))
?matrix
graph.edgelist(matrix(c(1,2,3,4), nrow=2, ncol = 2))
graph_edgelist(matrix(c(1,2,3,4), nrow=2, ncol = 2))
graph_from_edgelist(matrix(c(1,2,3,4), nrow=2, ncol = 2))
g<-graph_from_edgelist(matrix(c(1,2,3,4), nrow=2, ncol = 2))
summary(g)
V(g)
V(g)$name
g<-graph_from_edgelist(matrix(c("jane","stella","tony","katherine"), nrow=2, ncol = 2))
V(g)$name
V(g)
g<-graph.ring(10)
plot(g)
V(g)<-sample(letters, vcoung(g))
V(g)<-sample(letters, vcount(g))
V(g)$name<-sample(letters, vcount(g))
plot(g)
make_ring(10)
graph.ring(10)
setwd("~/业务分析/network")
df<-read.csv("R_qq_troop.csv", stringsAsFactors = F)
head(df)
names(df)[2]<-"group"
head(df)
names(df)
names(df)[1:2]<-c("qq","group")
head(df)
df<-read.csv("SQL_qq_troop.csv", stringsAsFactors = F)
head(df)
df<-read.csv("R_qq_troop.csv", stringsAsFactors = F)
library(dplyr)
df<-mutate(df, qq, group=troopid)
head(df)
df<-transmute(df, qq, group=troopid)
head(df)
group_count<-count(df, group, sort =T)
group_count
arrange(group_count, n)
groupmax<- groups_count$group[1]
groupmax<- group_count$group[1]
groupmax
class(groupmax)
head(df)
class(df)
str(df)
df$group <- as.character(df$group)
head(df)
str(df)
groupmax<-as.character(groupmax)
filter(df, group ==groupmax)
df1<-filter(df, group ==groupmax)
g<-graph.data.frame
g<-graph.data.frame(df1, directed=F)
V(g)$names
g
vcount(g)
ecount(g)
V(g)[groupmax]
V(g)[groupmax]$color<-'red'
plot(g)
plot(g, vertex.label = NULL)
plot(g, vertex.label = NA)
plot(g, vertex.label = NA, vertex.size = 2)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.circle)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.fruchterman.reingold)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.fruchterman.reingold.grid)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.grid.3d)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.kamada.kawai)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.bipartite)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.graphopt)
group_count
groupmax<-group_count$group[1:2]
df1<-filter(df, group %in%groupmax)
g<-graph.data.frame(df1, directed=F)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.graphopt)
V(g)[groupmax]$color<-'red'
V(g)[i in groupmax]$color<-'red'
df
str(df)
V(g)[groupmax[1]]$color<-'red'
head(df1)
str(df1)
group_count<-count(df, group,sort=T)
group_count
groupmax<-group_count$group[1:2]
V(g)[groupmax]$color<-'red'
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.graphopt)
tkplot(g, layout = layout.kamada.kawai)
tkplot(g, vertex.label = NA, vertex.size = 2, layout = layout.graphopt)
tkplot(g, vertex.label = NA, vertex.size = 2, layout = layout.sphere)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.bipartite)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.davidson.harel)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.drl)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.gem)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.grid)
tkplot(g, vertex.label = NA, vertex.size = 2, layout = layout.grid)
tkplot(g, vertex.label = NA, vertex.size = 2, layout = layout.grid)
tkplot(g, vertex.label = NA, vertex.size = 2, layout = layout.svd)
tkplot(g, vertex.label = NA, vertex.size = 2, layout = layout.sugiyama)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.sugiyama)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.star)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.spring)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.sphere)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.show)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.reingold.tilford)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.random)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.norm)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.merge)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.mds)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.lgl)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.svd)
df <- read.csv("R_qq_troop.csv", stringsAsFactors = F)
head(df)
str(df)
df <- transmute(df, qq, group = as.character(troopid))
plot(g, vertex.label = NA, vertex.size = 2, layout =layout.davidson.harel)
source('~/业务分析/network/igraph.R', echo=TRUE)
source('~/业务分析/network/igraph.R', echo=TRUE)
source('~/业务分析/network/igraph.R', echo=TRUE)
source('~/业务分析/network/igraph.R', echo=TRUE)
plot(g, vertex.label = NA, vertex.size = 2, layout = layout.random)
tkplot(g, vertex.label = NA, vertex.size = 2, layout = layout.random)
tkplot(g, vertex.label = NA, vertex.size = 2, layout = layout.fruchterman.reingold)
tkplot(g, vertex.label = NA, vertex.size = 2, layout = layout.random)
tkplot(g, vertex.label = NA, vertex.size = 2, layout = layout.graphopt)
tkplot(g, vertex.label = NA, vertex.size = 2, layout = layout.grid)
source('~/业务分析/network/igraph.R', echo=TRUE)
tkplot(g, vertex.label = NA, vertex.size = 2, layout = layout.reingold.tilford)
tkplot(g, vertex.label = NA, vertex.size = 2, layout = layout.random)
tkplot(g, vertex.label = NA, vertex.size = 2, layout = layout.random)
tkplot(g, vertex.label = NA, vertex.size = 2, layout = layout.random)
